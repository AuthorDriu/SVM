#ifndef VM_INSTRUCTIONS_H
#define VM_INSTRUCTIONS_H

enum Instructions
{
    /*
        -> - Запись
        s - аргумент, взятый из стека
        m - арумент взятый из памяти
        r - аргумент взятый из стека возврата
        S - стек
        M - память
        R - стек возврата
        * - аргумент в коде
        IP - указатель на команду
    */

    // Арифметические команды
    ADD                 = 0b01000001, // 41 (65) -> A
    SUB                 = 0b01010011, // 53 (83) -> S
    MUL                 = 0b01001101, // 4D (77) -> M
    DIV                 = 0b01000100, // 44 (68) -> D

    // Контроль потока
    JUMP                = 0b01001010, // 4A (74) -> J
    JUMP_IF_ZERO        = 0b01011010, // 5A (90) -> Z
    JUMP_IF_NEG         = 0b01001110, // 4E (78) -> N
    CALL                = 0b01000101, // 45 (69) -> E (execute)
    RET                 = 0b01010010, // 52 (82) -> R
    HALT                = 0b01001000, // 48 (72) -> H

    // Ввод/вывод
    INP_I               = 0b01001001, // 49 (73) -> I
    INP_C               = 0b01000011, // 43 (67) -> C
    OUT_I               = 0b01101001, // 69 (105) -> i
    OUT_C               = 0b01100011, // 63 (99) -> c
    
    // Escape-последовательности
    NEWL                = 0b01101110, // 6E (110) -> n
    ENDL                = 0b01100101, // 65 (101) -> e
    SPACE               = 0b01110011, // 73 (115) -> s

    // Стек и память
    PUSH                = 0b01010000, // 50 (80) -> P
    POP                 = 0b01110000, // 70 (112) -> p
    WRITE               = 0b01010111, // 57 (87) -> W
    LOAD                = 0b01001100, // 4C (76) -> L
};

#endif